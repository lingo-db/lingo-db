#pragma once
#include "lingodb/compiler/frontend/ast/query_node.h"
#include "lingodb/compiler/frontend/sql_scope.h"
namespace lingodb::ast {
class BoundExpressionListRef;
class BoundSetOperationNode : public QueryNode {
   static constexpr QueryNodeType TYPE = QueryNodeType::SET_OPERATION_NODE;

   public:
   BoundSetOperationNode(std::string alias, SetOperationType setType, bool setOpAll, std::shared_ptr<TableProducer> boundLeft, std::shared_ptr<TableProducer> boundRight, std::shared_ptr<analyzer::SQLScope> leftScope, std::shared_ptr<analyzer::SQLScope> rightScope) : QueryNode(QueryNodeType::BOUND_SET_OPERATION_NODE), setType(setType), setOpAll(setOpAll), boundLeft(boundLeft), boundRight(boundRight), leftScope(leftScope), rightScope(rightScope) {}
   SetOperationType setType;
   bool setOpAll = false;
   std::shared_ptr<TableProducer> boundLeft;
   std::shared_ptr<TableProducer> boundRight;

   std::shared_ptr<analyzer::SQLScope> leftScope;
   std::shared_ptr<analyzer::SQLScope> rightScope;

   std::shared_ptr<ColumnReference> leftMapping;
   std::shared_ptr<ColumnReference> rightMapping;
};

//! Represents an expression list as generated by a VALUES statement
class BoundValuesQueryNode : public QueryNode {
   public:
   static constexpr QueryNodeType TYPE = QueryNodeType::BOUND_VALUES;
   BoundValuesQueryNode(std::string alias, std::shared_ptr<BoundExpressionListRef> expressionListRef) : QueryNode(TYPE), expressionListRef(std::move(expressionListRef)) {}

   //! The expressions in the list
   std::shared_ptr<BoundExpressionListRef> expressionListRef;
};

class BoundCTENode : public QueryNode {
   public:
   static constexpr const QueryNodeType TYPE = QueryNodeType::BOUND_CTE_NODE;

   BoundCTENode() : QueryNode(QueryNodeType::BOUND_CTE_NODE) {}

   std::shared_ptr<TableProducer> query;

   //Maybe use input logic instead
   std::shared_ptr<TableProducer> child;

   //!The scope for the query. Must be not a pointer, so a copy is required everytime the cte query is translated
   analyzer::SQLScope subQueryScope;

   std::vector<std::pair<std::shared_ptr<ColumnReference>, std::shared_ptr<ColumnReference>>> renamedColumnReferences;
};

} // namespace lingodb::ast