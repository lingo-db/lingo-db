name: build+test

on: 
  push:
  pull_request:

env:
  REGISTRY: ghcr.io
jobs:

  build:
    strategy:
      matrix:
        build_type: [ debug, asan, release ]
    runs-on: ubuntu-latest
    container: ghcr.io/lingo-db/lingodb-dev:e62ea236a788af041758bc8008ac07a44c64fe78
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CCache
        id: ccache
        uses: actions/cache@v3
        with:
          path: /ccache
          key: ccache-${{ matrix.build_type }}-build
      - name: Build
        run: |
            mkdir -p /ccache
            export CXX="ccache clang++-20"
            export CC="ccache clang-20"
            export CCACHE_DIR="/ccache"
            make clean
            make build-${{ matrix.build_type }}
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
          retention-days: 1

  test:
    needs: build
    strategy:
      matrix:
        build_type: [ debug, asan ]
    runs-on: ubuntu-latest
    container: ghcr.io/lingo-db/lingodb-dev:e62ea236a788af041758bc8008ac07a44c64fe78
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Test
        run: |
            export ASAN_OPTIONS=detect_leaks=0          
            touch build/dependencies
            touch build/lingodb-${{ matrix.build_type }}/.stamp
            touch build/lingodb-${{ matrix.build_type }}/.buildstamp          
            chmod +x build/lingodb-${{ matrix.build_type }}/*          
            make TEST_BUILD_TYPE=${{ matrix.build_type }} DATA_BUILD_TYPE=${{ matrix.build_type }} test-no-rebuild
  sqlite_tests:
    strategy:
      matrix:
        build_type: [ release, asan ]
    needs: build
    runs-on: ubuntu-latest
    container: ghcr.io/lingo-db/lingodb-dev:e62ea236a788af041758bc8008ac07a44c64fe78
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Test
        run: |
          export ASAN_OPTIONS=detect_leaks=0
          touch build/dependencies
          touch build/lingodb-${{ matrix.build_type }}/.stamp
          touch build/lingodb-${{ matrix.build_type }}/.buildstamp
          chmod +x build/lingodb-${{ matrix.build_type }}/*
          make SQLITE_TEST_BUILD_TYPE=${{ matrix.build_type }} sqlite-test-no-rebuild

  sqlite_dataset-tests:
    strategy:
      matrix:
        build_type: [ release, asan ]
    needs: build
    runs-on: ubuntu-latest
    container: ghcr.io/lingo-db/lingodb-dev:e62ea236a788af041758bc8008ac07a44c64fe78
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Prepare Binaries
        run: |
          chmod +x build/lingodb-${{ matrix.build_type }}/*
      - name: Restore datasets from cache
        id: cache-datasets
        uses: actions/cache@v4
        with:
          path: /datasets/
          key: datasets
      - name: Generate dataset if not cached
        if: steps.cache-datasets.outputs.cache-hit != 'true'
        run: |
          apt-get update && apt-get install -y bison flex zstd
          mkdir -p /datasets/tpch-1
          mkdir -p /datasets/tpcds-1 
          # mkdir -p /datasets/job
          bash tools/generate/tpch.sh /datasets/tpch-1 1
          bash tools/generate/tpcds.sh /datasets/tpcds-1 1
          # bash tools/generate/job.sh /datasets/job
      - name: Load datasets
        run: |
          export BASE_PATH=$(pwd)
          export ASAN_OPTIONS=detect_leaks=0
          mkdir -p /db/tpch-1
          cd /datasets/tpch-1
          $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/tpch-1 < $BASE_PATH/resources/sql/tpch/initialize.sql
          mkdir -p /db/tpcds-1
          cd /datasets/tpcds-1
          $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/tpcds-1 < $BASE_PATH/resources/sql/tpcds/initialize.sql
          # mkdir -p /db/job
          # cd /datasets/job
          # $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/job < $BASE_PATH/resources/sql/job/initialize.sql
          # cd $BASE_PATH
      - name: Test
        run: |
          export ASAN_OPTIONS=detect_leaks=0
          ./build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpchSf1.test /db/tpch-1
          ./build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpcdsSf1.test /db/tpcds-1
          # ./build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/job.test /db/job
          

  build_lingodb_python:
    runs-on: ubuntu-latest
    container: ghcr.io/lingo-db/lingodb-py-dev:313ae67dd4c39b7af54aae98b8d97ed1d6a452fc
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: |
            rm -rf /built-packages          
            mkdir -p /built-packages
            bash tools/python/bridge/create_package.sh cp312-cp312          
            cd tools/python
            /opt/python/cp312-cp312/bin/python3 -m build .
            cp dist/*.whl /built-packages/.
      - uses: actions/upload-artifact@master
        with:
          name: lingodb-python-build
          path: /built-packages
  test_lingodb_python:
    needs: build_lingodb_python
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: lingodb-python-build
          path: built-packages
      - name: Test
        run: |
            pip install built-packages/*.whl
            pip install pandas
            python3 tools/python/test/test.py
            python3 tools/python/test/mlir-construction.py
