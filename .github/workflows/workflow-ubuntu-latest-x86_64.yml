name: build+test (ubuntu 24.04 x86_64)

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
jobs:
  build:
    strategy:
      matrix:
        build_type: [ debug, asan, release ]
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-dev:621f9dc1279092fce957b9852a9f7f421a7ebfe1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: CCache
        id: ccache
        uses: actions/cache@v3
        with:
          path: /ccache
          key: ccache-${{ matrix.build_type }}-build
      - name: Build
        run: |
          mkdir -p /ccache
          make clean
          make build-${{ matrix.build_type }}
        env:
          CCACHE_DIR: /ccache
          CC: ccache clang-20
          CXX: ccache clang++-20
          ENABLE_BASELINE_BACKEND: "ON"
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
          retention-days: 1

  test:
    needs: build
    strategy:
      matrix:
        build_type: [ debug, asan ]
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-dev:621f9dc1279092fce957b9852a9f7f421a7ebfe1
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Setup for tests
        run: |
          touch build/dependencies
          touch build/lingodb-${{ matrix.build_type }}/.stamp
          touch build/lingodb-${{ matrix.build_type }}/.buildstamp
          chmod +x build/lingodb-${{ matrix.build_type }}/*
      - name: Test lit
        run: |
          make test-no-rebuild-lit
        env:
          TEST_BUILD_TYPE: ${{ matrix.build_type }}
          DATA_BUILD_TYPE: ${{ matrix.build_type }}

      - name: Test unit
        run: |
          make test-no-rebuild-unit
        env:
          TEST_BUILD_TYPE: ${{ matrix.build_type }}
          DATA_BUILD_TYPE: ${{ matrix.build_type }}

      - name: Test sqlite-small (llvm)
        run: |
          make test-no-rebuild-sqlite-small
        env:
          TEST_BUILD_TYPE: ${{ matrix.build_type }}
          DATA_BUILD_TYPE: ${{ matrix.build_type }}
          LINGODB_EXECUTION_MODE: DEFAULT

      - name: Test sqlite-small (baseline)
        run: |
          # only run sqlite-small for default and baseline backend, since lit chooses backend on its own and unit is backend-agnostic
          make test-no-rebuild-sqlite-small
        env:
          TEST_BUILD_TYPE: ${{ matrix.build_type }}
          DATA_BUILD_TYPE: ${{ matrix.build_type }}
          LINGODB_EXECUTION_MODE: BASELINE

  sqlite_tests:
    strategy:
      matrix:
        build_type: [ release, asan ]
    needs: build
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-dev:621f9dc1279092fce957b9852a9f7f421a7ebfe1
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Setup for tests
        run: |
          touch build/dependencies
          touch build/lingodb-${{ matrix.build_type }}/.stamp
          touch build/lingodb-${{ matrix.build_type }}/.buildstamp
          chmod +x build/lingodb-${{ matrix.build_type }}/*
      - name: Test llvm backend
        run: |
          make test-no-rebuild-sqlite
        env:
          SQLITE_TEST_BUILD_TYPE: ${{ matrix.build_type }}
          LINGODB_EXECUTION_MODE: "DEFAULT"
      - name: Test baseline backend
        run: |
          make test-no-rebuild-sqlite
        env:
          SQLITE_TEST_BUILD_TYPE: ${{ matrix.build_type }}
          LINGODB_EXECUTION_MODE: "BASELINE"

  sqlite_dataset-tests:
    strategy:
      matrix:
        build_type: [ release, asan ]
    needs: build
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-dev:621f9dc1279092fce957b9852a9f7f421a7ebfe1
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Prepare Binaries
        run: |
          chmod +x build/lingodb-${{ matrix.build_type }}/*
      - name: Restore datasets from cache
        id: cache-datasets
        uses: actions/cache@v4
        with:
          path: /datasets/
          key: datasets-with-job
      - name: Generate dataset if not cached
        if: steps.cache-datasets.outputs.cache-hit != 'true'
        run: |
          apt-get update && apt-get install -y bison flex zstd
          mkdir -p /datasets/tpch-1
          mkdir -p /datasets/tpcds-1
          mkdir -p /datasets/job
          bash tools/generate/tpch.sh /datasets/tpch-1 1
          bash tools/generate/tpcds.sh /datasets/tpcds-1 1
          bash tools/generate/job.sh /datasets/job
      - name: Load dataset tpch
        run: |
          export BASE_PATH=$(pwd)
          mkdir -p /db/tpch-1
          cd /datasets/tpch-1
          $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/tpch-1 < $BASE_PATH/resources/sql/tpch/initialize.sql
      - name: Load dataset tpcds
        run: |
          export BASE_PATH=$(pwd)
          mkdir -p /db/tpcds-1
          cd /datasets/tpcds-1
          $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/tpcds-1 < $BASE_PATH/resources/sql/tpcds/initialize.sql
      - name: Load dataset job
        run: |
          export BASE_PATH=$(pwd)
          mkdir -p /db/job
          cd /datasets/job
          $BASE_PATH/build/lingodb-${{ matrix.build_type }}/sql /db/job < $BASE_PATH/resources/sql/job/initialize.sql

      - name: Test tpcds (llvm)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpchSf1.test /db/tpch-1
        env:
          LINGODB_EXECUTION_MODE: DEFAULT
      - name: Test tpcds (baseline)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpchSf1.test /db/tpch-1
        env:
          LINGODB_EXECUTION_MODE: BASELINE

      - name: Test tpcds (llvm)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpcdsSf1.test /db/tpcds-1
        env:
          LINGODB_EXECUTION_MODE: DEFAULT
      - name: Test tpcds (baseline)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/tpcdsSf1.test /db/tpcds-1
        env:
          LINGODB_EXECUTION_MODE: BASELINE

      - name: Test job (llvm)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/job.test /db/job
        env:
          LINGODB_EXECUTION_MODE: DEFAULT
      - name: Test job (baseline)
        run: build/lingodb-${{ matrix.build_type }}/sqlite-tester test/sqlite-datasets/job.test /db/job
        env:
          LINGODB_EXECUTION_MODE: BASELINE


  build_lingodb_python:
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-py-dev:8d290609bbccabd5c07a7c3c06ca44da8ca45c92
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: |
          rm -rf /built-packages
          mkdir -p /built-packages
          bash tools/python/bridge/create_package.linux.sh cp312-cp312
          cd tools/python
          /opt/python/cp312-cp312/bin/python3 -m build .
          cp dist/*.whl /built-packages/.
      - uses: actions/upload-artifact@master
        with:
          name: lingodb-python-build
          path: /built-packages

  test_lingodb_python:
    needs: build_lingodb_python
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: lingodb-python-build
          path: built-packages
      - name: Test
        run: |
          pip install built-packages/*.whl
          pip install pandas
          python3 tools/python/test/test.py
          python3 tools/python/test/mlir-construction.py
  test_standalone:
    needs: build
    strategy:
      matrix:
        build_type: [ debug]
    runs-on: ubuntu-24.04
    container: ghcr.io/lingo-db/lingodb-dev:621f9dc1279092fce957b9852a9f7f421a7ebfe1
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@master
        with:
          name: ${{ matrix.build_type }}-build
          path: build/lingodb-${{ matrix.build_type }}
      - name: Test
        run: |
          REPO_ROOT=$(pwd)
          git config --global --add safe.directory "$REPO_ROOT"
          touch build/dependencies
          touch build/lingodb-${{ matrix.build_type }}/.stamp
          touch build/lingodb-${{ matrix.build_type }}/.buildstamp
          chmod +x build/lingodb-${{ matrix.build_type }}/*
          make DATA_BUILD_TYPE=${{ matrix.build_type }} resources/data/test/.stamp
          echo "select * from test" > test.sql
          bash tools/standalone-query/create.sh test.sql resources/data/test build/lingodb-${{ matrix.build_type }} /standalone-dir gh-ci-standalone-test-branch
          cd /standalone-dir
          mkdir build && cd build
          cmake  -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . -j $(nproc)
          ./main $REPO_ROOT/resources/data/test
